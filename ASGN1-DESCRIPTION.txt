{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 LucidaGrande;\f1\fnil\fcharset0 LucidaGrande-Bold;}
{\colortbl;\red255\green255\blue255;\red24\green25\blue26;\red11\green89\blue177;}
{\*\expandedcolortbl;;\cssrgb\c12549\c12941\c13333;\cssrgb\c0\c43529\c74902;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa380\partightenfactor0

\f0\fs38 \AppleTypeServices\AppleTypeServicesF65539 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1) Copy the L00 files to a L01 directory, and update the PROJECT specification in CMakeLists.txt to be L01. \'a0Add the provided DAGNode and Motion cpp and header files to your src folder, and add the provided obj and bvh files to your resource folder (i.e., your assignment should be set up like the L00 code, and run int he same way, providing the resources folder as an argument when running the code).\
2) Make a function or class and class method that can draw an axis. \'a0Use the GLSL col_vert and col_frag programs that can draw in solid colours and draw 3 unlit length lines in the x y and z direction starting at the origin. \'a0Make the x line red, the y green, and the z blue. \'a0Use this code to draw the world frame. \'a0Do this just before the code to "// Draw teapot."\
3) Draw a coordinate frame for the root frame of the loaded bvh file, but first apply a uniform scale of 1/100 as the bvh data had translations that are large in comparison to the viewing volume set up in the L00 code. \'a0You should accumulate both the constant offset (though it is zero), with the 6 channels of data from the motion. \'a0\
4) Create a frame counter that updates on every render, and loops back to frame zero once the maximum number of frames is reached. \'a0Use this frame counter to\'a0\uc0\u8232 look up the appropriate frame data for the root frame you're drawing in the previous step (and use this in later steps for drawing the full skeleton).\
5) Implement keyboard controls. Make space should toggle (start and stop) the motion file playing. \'a0Make enter toggle the direction that the motion is playing (forward or backward, i.e., incrementing or decrementing frames). \'a0Make up and down arrows increase and decrease the stepping rate on each render call, and don't let the stepping rate go below 1.\
6) Draw coordinate frames for all nodes in the loaded hierarchy. \'a0Just like the root, you should accumulate the offset and all channel transformations before drawing. \'a0You can do this likewise for the end site, though note that there will not be any channel data.\
7) Add geometry to your DAG nodes. \'a0Use the provided shape files with appropriate transformations to draw something reasonable for the size of the character. \'a0You can hand code the construction of these body parts.\
\pard\pardeftab720\sa400\partightenfactor0

\f1\b\fs36 \AppleTypeServices\AppleTypeServicesF65539 \cf2 Finished?\
\pard\pardeftab720\sa380\partightenfactor0

\f0\b0\fs38 \AppleTypeServices\AppleTypeServicesF65539 \cf2 Great! Be sure your name and student number appears is in the window title, in your readme, and in the top comments section of each of your source files.\
Prepare a zip file with your source code folder, and any files you've added to the resources.\'a0
\f1\b \AppleTypeServices\AppleTypeServicesF65539 ONLY
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \'a0use a\'a0zip\'a0format\'a0archive! Submit it via\'a0{\field{\*\fldinst{HYPERLINK "http://www.mcgill.ca/mycourses"}}{\fldrslt \cf3 \strokec3 MyCourses}}.\'a0
\f1\b \AppleTypeServices\AppleTypeServicesF65539 DOUBLE CHECK
\f0\b0 \AppleTypeServices\AppleTypeServicesF65539 \'a0your submitted files by downloading them. You cannot receive any marks for assignments with missing or corrupt files!!\
Note that you are encouraged to discuss assignments with your classmates, but not to the point of sharing code or answers. All work must be your own. Please talk to the TAs or the prof if the academic integrity policies are not clear.\
}